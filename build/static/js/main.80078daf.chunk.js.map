{"version":3,"sources":["Components/Sidebar/SidebarOption/SidebarOption.js","Components/Sidebar/Sidebar.js","firebase.js","Components/Feed/TweetBox/TweetBox.js","Components/Feed/Post/Post.js","Components/Feed/Feed.js","Components/Widgets/Friend/Friend.js","Components/Widgets/Widgets.js","App.js","serviceWorker.js","index.js"],"names":["SidebarOption","Icon","text","active","className","Sidebar","HomeIcon","SearchIcon","NotificationsIcon","MessageIcon","BookmarkIcon","ListIcon","AccountCircleIcon","MoreHorizIcon","Button","variant","fullWidth","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","TweetBox","useState","tweetMessage","setTweetMessage","Avatar","src","value","onChange","e","target","placeholder","type","onClick","preventDefault","collection","add","displayName","username","userImage","Post","userimage","shareImage","alt","Feed","posts","setPosts","useEffect","onSnapshot","snapshot","docs","map","doc","data","post","postImage","Friend","Widgets","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.80078daf.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./SidebarOption.css\";\n\nfunction SidebarOption({ Icon, text, active }) {\n  return (\n    <div className={`sidebarOption ${active && \"sidebarOption--active\"}`}>\n      <Icon />\n      <h2>{text}</h2>\n    </div>\n  );\n}\n\nexport default SidebarOption;\n","import React from \"react\";\nimport \"./Sidebar.css\";\nimport SidebarOption from \"./SidebarOption/SidebarOption\";\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport MessageIcon from \"@material-ui/icons/Message\";\nimport BookmarkIcon from \"@material-ui/icons/Bookmark\";\nimport ListIcon from \"@material-ui/icons/List\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport { Button } from \"@material-ui/core\";\n\nfunction Sidebar() {\n  return (\n    <div className=\"sidebar\">\n      <TwitterIcon className=\"twitter-icon\" />\n      <SidebarOption active text=\"Home\" Icon={HomeIcon} />\n      <SidebarOption text=\"Search\" Icon={SearchIcon} />\n      <SidebarOption text=\"Notifications\" Icon={NotificationsIcon} />\n      <SidebarOption text=\"Messages\" Icon={MessageIcon} />\n      <SidebarOption text=\"Bookmarks\" Icon={BookmarkIcon} />\n      <SidebarOption text=\"Lists\" Icon={ListIcon} />\n      <SidebarOption text=\"Profile\" Icon={AccountCircleIcon} />\n      <SidebarOption text=\"More\" Icon={MoreHorizIcon} />\n      <Button variant=\"outlined\" className=\"sidebar-tweet\" fullWidth>\n        Tweet\n      </Button>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAQHFqJC8RJVgjExb0472RKPDgXb5VQtr0\",\n  authDomain: \"react-twitter-clone-6aa31.firebaseapp.com\",\n  databaseURL: \"https://react-twitter-clone-6aa31.firebaseio.com\",\n  projectId: \"react-twitter-clone-6aa31\",\n  storageBucket: \"react-twitter-clone-6aa31.appspot.com\",\n  messagingSenderId: \"853035841004\",\n  appId: \"1:853035841004:web:04d9a9a459ae3729a13cc9\",\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst db = firebaseApp.firestore();\n\nexport default db;\n","import React, { useState } from \"react\";\nimport \"./TweetBox.css\";\nimport { Avatar, Button } from \"@material-ui/core\";\nimport db from \"../../../firebase\";\n\nfunction TweetBox() {\n  const [tweetMessage, setTweetMessage] = useState(\"\");\n  const sendTweet = (e) => {\n    e.preventDefault();\n\n    db.collection(\"posts\").add({\n      displayName: \"Mücahit Şahin\",\n      username: \"mucahitsah\",\n      text: tweetMessage,\n      userImage:\n        \"https://avatars2.githubusercontent.com/u/38807255?s=460&u=deb087d587be7f6a4000e4e710ec4d1daa6fde84&v=4\",\n    });\n    setTweetMessage(\"\");\n  };\n  return (\n    <div className=\"tweetbox\">\n      <form>\n        <div className=\"tweetbox-input-row\">\n          <Avatar src=\"https://avatars2.githubusercontent.com/u/38807255?s=460&u=deb087d587be7f6a4000e4e710ec4d1daa6fde84&v=4\" />\n          <input\n            value={tweetMessage}\n            onChange={(e) => setTweetMessage(e.target.value)}\n            className=\"tweetbox-input\"\n            placeholder=\"What's happening?\"\n            type=\"text\"\n          />\n        </div>\n        <Button onClick={sendTweet} className=\"tweetbox-button\">\n          Tweetle\n        </Button>\n      </form>\n    </div>\n  );\n}\n\nexport default TweetBox;\n","import React from \"react\";\nimport { Avatar } from \"@material-ui/core\";\nimport \"./Post.css\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\nimport CommentIcon from \"@material-ui/icons/Comment\";\nimport RepeatIcon from \"@material-ui/icons/Repeat\";\n\nfunction Post({ userimage, username, displayName, text, shareImage }) {\n  return (\n    <div className=\"post\">\n      <div className=\"post-header\">\n        <Avatar src={userimage} />\n        <h3>{displayName}</h3>\n        <h4>{\"@\" + username}</h4>\n      </div>\n      <div className=\"post-content\">{text}</div>\n      {shareImage && (\n        <div className=\"post-image\">\n          <img src={shareImage} alt=\"shareimage\" />\n        </div>\n      )}\n      <div className=\"post-event\">\n        <div>\n          <FavoriteBorderIcon />\n        </div>\n        <div>\n          <CommentIcon />\n        </div>\n        <div>\n          <RepeatIcon />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Post;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Feed.css\";\nimport TweetBox from \"./TweetBox/TweetBox\";\nimport Post from \"./Post/Post\";\nimport db from \"../../firebase\";\n\nfunction Feed() {\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    db.collection(\"posts\").onSnapshot((snapshot) =>\n      setPosts(snapshot.docs.map((doc) => doc.data()))\n    );\n  }, []);\n  return (\n    <div className=\"feed\">\n      <div className=\"feed-header\">\n        <h2>Home</h2>\n      </div>\n\n      <TweetBox />\n      {posts.map((post) => (\n        <Post\n          userimage={post.userImage}\n          username={post.username}\n          displayName={post.displayName}\n          text={post.text}\n          shareImage={post.postImage}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default Feed;\n","import React from \"react\";\nimport { Avatar, Button } from \"@material-ui/core\";\nimport \"./Friend.css\";\n\nfunction Friend({ displayName, username }) {\n  return (\n    <div className=\"friend\">\n      <Avatar />\n      <h3>{displayName}</h3>\n      <Button className=\"friend-follow\">Follow</Button>\n    </div>\n  );\n}\n\nexport default Friend;\n","import React from \"react\";\nimport \"./Widgets.css\";\nimport Friend from \"./Friend/Friend\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nfunction Widgets() {\n  return (\n    <div className=\"widgets\">\n      <div className=\"widget-search\">\n        <SearchIcon className=\"widget-search-icon\" />\n        <input type=\"text\" placeholder=\"Twitter Search\" />\n      </div>\n\n      <div className=\"widget-tags\">\n        <h3>Gündem</h3>\n        <h3>#Deneme</h3>\n        <h3>#Deneme</h3>\n        <h3>#Deneme</h3>\n        <h3>#Deneme</h3>\n        <h3>#Deneme</h3>\n        <h3>#Deneme</h3>\n        <h3>#Deneme</h3>\n        <h3>#Deneme</h3>\n        <h3>#Deneme</h3>\n        <h3>#Deneme</h3>\n      </div>\n\n      <div className=\"widget-recommended-friends\">\n        <Friend displayName=\"Ahmet Yılmaz\" />\n        <Friend displayName=\"Mehmet Dursun\" />\n        <Friend displayName=\"Necati Şahin\" />\n      </div>\n    </div>\n  );\n}\n\nexport default Widgets;\n","import React from \"react\";\nimport \"./App.css\";\nimport Sidebar from \"./Components/Sidebar/Sidebar\";\nimport Feed from \"./Components/Feed/Feed\";\nimport Widgets from \"./Components/Widgets/Widgets\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Sidebar />\n\n      <Feed />\n\n      <Widgets />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}